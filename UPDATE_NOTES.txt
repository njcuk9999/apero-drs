# Update Note Summary - Version 0.7.073

Date: 2020-12-21

## Updates since Version 0.6.132

- database
    - complete code change on how databases are handled. Currently supported
      databases are
        - calibration database (instead of master_calib_SPIROU.py)
        - telluric database (instead of master_tellu_SPIROU.py)
        - file database (instead of index.fits files in each dir)
        - log database (instead of index.fits files in each dir)
        - object database (instead of object_query_list.fits)
        - language database (instead of the language csv files)
    - add database options to installation process
    - added apero_database.py tool for importing/exporting data to/from database/csv

- processing
    - moving to use multiprocess.Pool instead of multiprocess.Process (should
      speed up how we handle jobs on multiple cores) - requires classes be
      pickle-able
    - add --science_targets and --telluric_targest to argumnets of apero_processing
    - added use of odometer code reject list (USE_ODO_REJECTLIST = True) and uses
      blacklist for odometer codes with column PP
    - added way to turn off recalculation of templates (RECAL_TEMPLATES = True/False)
      when False and a template already exists does not run MKTELLU3, MKTELLU3,
      FTELLU2, or FTELLU3
    - rewrote file/argument grouping function, now able to have a custom
      function to group files/arguments (recipe.group_func)
    - added a UPDATE_OBJECT_DB into run.ini files - if True will update the local
      object database with the information from the object googlesheet

- preprocessing
    - add QC to reject exptimes less than 10% required exptime
      (change using PP_BAD_EXPTIME_FRACTION)
    - add cosmic ray locating/correction (using slope + intercept)

- object resolution
    - now done in preprocessing (was extraction)
    - googlesheet master list of Gaia ID / RV / Teff - human editable
    - then use Gaia ID to crossmatch with Gaia/SIMBAD
    - fall back to header (properly)
    - header keys for all parameters DRS will use (+ source) separate from
      input header keys

- calibrations
    - now deal with combining files better
        - combine header keys (MJDEND, RDNOISE, GAIN, SATURATE, EXPTIME,
          NEXP, MJDMID) properly (rules set in default_keywords.py)
    - filename is now a checksum based on input files (cannot be composite of
      any one file as may be different combination of files leading to same
      filename --> confusion of outputs)
    - calibrations are filter by a pearson R test against the median of all
      files bound for combining (warning given when calibration is removed)
      in the combine table CMETRIC, CTHRES and CPASS are given for all files
      (passed and failed) to show criteria

- localisation
    - added new fits table extensions - the central position coefficients and
      width coefficients (as tables of order vs coefficient)

- wave solution
    - added new fits table extension - the wave coefficients (as a table of
      order vs coefficient)

- tellurics
    - added header keys to template file:
        - MTPNFILE: Number of files used to make template
        - MTP_HASH: Unique hash for input template files
        - MTP_TIME: Time template was created
    - added header keys to mk_tellu files:
        - MKTTEMPN: Number of files used to make template
        - MKTTEMPH: Unique hash for input template files
        - MKTTEMPT: Time template was created
    - added header keys to fit_tellu files:
        - FTTTEMPN: Number of files used to make template
        - FTTTEMPH: Unique hash for input template files
        - MKTTEMPT: Time template was created
    - added a RECAL_TEMPLATE = True/False to run.ini - if False and a template
      exists in database will not re-create template - if recalculating all
      telluric correction (recommended) this should be set to True
    - added a berv coverage metric which adds a QC to the template creation
      whereby a template is not constructed if BERV coverage is too low (stops
      templates being constructed from too few observations)
    - can now define a template to use for obj_mk_tellu and obj_fit_tellu codes
      use the argument --template (can either be a path to a file or a filename
      in the telluric database directory)
    - add additional code to find up to 300 brightest OH lines and correct
      them better - using dot product of derivative vs science spectrum
      (including the generation of new sky PCA components - supplied with APERO)

- ccf
    - add in ccf mask normalization options 'all', 'order', 'None'
      access via user_constants.py (CCF_MASK_NORMALIZATION) or
      cal_ccf_spirou.py --masknormmode

- cal_drift
    - added support for OBJ_FP and DARK_FP files (controlled via DRIFT_DPRTYPES
      in the user_constants.ini file)
    - now deals with non-FP fibers - will skip these entries

- out_postprocess
    - added recipe to run at the end to convert reduced files into e.fits, t.fits
      s.fits, p.fits, v.fits
    - can clear reduced files using '--clear' (warning deletes all /reduced/ files)
    - by default does not overwrite, use '--overwrite' to update old files
    - added out_post_process to apero_processing.py

- general/other/misc
    - all functions should be pickle-able and python typed and have doc strings
    - reorganisation of modulular structure - minimize circular importing
      minimize when certain modules are imported/not imported
    - tool to generate full user_config.ini / user_constants.ini (all constants)
      use "apero_constants.py --generate=full"  or regenerate current file
      (lost/corrupt?) with "apero_constants.py --generate=standard" or choose
      which constant sections you want with "apero_constants.py --generate=choose"